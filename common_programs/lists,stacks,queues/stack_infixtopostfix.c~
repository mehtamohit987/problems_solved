#include <stdio.h>
#include <stdlib.h>

typedef int number;

struct node 
{
	number value;
	struct node *next;
} *top;

typedef struct node node;


void push(number v, short *f);
number pop(short *f);
number showtop(short *f);

number isempty()
{
		if(top==NULL) return 1;
		return 0;
};

node * new_node(number v, short *f)
{
	node *ele = (node *)malloc(sizeof(node));
	if(ele)
	{
		*f=1;
		ele->value = v;
		ele->next=top;
		return ele;
	};
	
	return NULL;
}
 
int isoperator(char s)
{
	if(s=='+'||s=='-'||s=='*'||s=='/'||s=='^')
	return 1;
	return 0;
}; 

int highprec(char op1, char op2)
{
	switch(op1)
	{
		case '^': 	return 1;
		
		case '*':
		case '/': 
					if(op2=='+'||op2=='-')
					return 1;
					else 
					return 0;
		
		case '+'||'-': return 0;
	
	}
	return 0;
}

int main()
{
	top=NULL;
	short f=0;		/*Flag to return process status*/
	int v;
	char *s = (char *)malloc(sizeof(char)*30);
	gets(s);		/*Input Expression*/
		
	while(*s!='\0')	/*Runs character by character till null character*/ 
	{
		v=*s;
		
		if(!isoperator(v)) 	/*Checks if character is an operator*/
		{
			putchar(v);			
		}					
		else
		{
			if(isempty())
			push(v,&f);
			else
			{
				if(!highprec(v,showtop(&f)))
				push(v,&f);
				else
				{
					do
					{
						v=pop(&f);
						putchar(v);
						push(v,&f);
					}while(!isempty()&&!highprec(v,showtop(&f)));
				}
			}
		}				
		s++;
	};
	
	while(!isempty())
	{
		v=pop(&f);
		putchar(v);
	}						
	
	return 0;
}
	
	
void push(number v, short *f)
{
	node * ele = new_node(v,f);
	if(f) top=ele;
}

number pop(short *f)
{
	if(!top)
	{
		*f=0;
		return 0;
	}
	
	node * ele = top;
	top=top->next;
	number v = ele->value;
	free(ele);
	*f=1;
	return v;
}

number showtop(short *f)
{
	if(top)
	{
		*f=1;
		return top->value;
	}
	*f=0;
	return 0;
}
